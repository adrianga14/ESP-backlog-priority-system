# orchestrator.py

from extract import extract_reviews
from clean import main as clean_main
from sentiment import apply_sentiment
from topics import apply_topics
from config import PIPELINE_VERSION

# Nota: se elimin√≥ el uso de `priority.py` ya que la prioridad se calculaba
# √∫nicamente por frecuencia. El an√°lisis ahora se realiza en el dashboard.

def run_pipeline():
    """
    Funci√≥n central que ejecuta todo el flujo del pipeline:
    1) Extrae rese√±as
    2) Limpia texto
    3) Aplica an√°lisis de sentimientos
    4) Detecta t√≥picos
    """
    try:
        print(f"üü° Iniciando pipeline v{PIPELINE_VERSION}...")

        print("‚û°Ô∏è Extrayendo rese√±as...")
        extract_reviews()

        print("‚û°Ô∏è Limpiando texto...")
        clean_main()

        print("‚û°Ô∏è Aplicando sentimiento...")
        apply_sentiment()

        print("‚û°Ô∏è Detectando t√≥picos...")
        apply_topics()

        print("‚úÖ Pipeline ejecutado correctamente.")
        return {
            "statusCode": 200,
            "body": "Pipeline ejecutado correctamente"
        }

    except Exception as e:
        print(f"‚ùå Error en el pipeline: {e}")
        return {
            "statusCode": 500,
            "body": str(e)
        }

def lambda_handler(event=None, context=None):
    """
    Handler oficial para AWS Lambda.
    """
    return run_pipeline()

# üîÅ Permite ejecutar el pipeline directamente si se corre localmente
if __name__ == "__main__":
    run_pipeline()